
static __device__ void *alloc(void *heap, volatile unsigned *free_index, unsigned int heap_size, int nbytes, int *alloc_failed) {
   unsigned char *cheap = (unsigned char *)heap;
   unsigned rounded = nbytes + (8 - (nbytes % 8));
   unsigned offset = atomicAdd((unsigned int *)free_index, rounded);
   if (offset + nbytes > heap_size) { *alloc_failed = 1; return 0x0; }
   else return (void *)(cheap + offset);
}
template<typename T>
inline T *dense_vec_fill(T *alloc, double *vals) {
    alloc->values = vals;
    alloc->size = *(((long *)vals) - 1);
    alloc->tiling = 1;
    return alloc;
}
template<typename T>
inline T *sparse_vec_fill(T *alloc, double *vals, int *indices, unsigned size, unsigned tiling) {
    alloc->values = vals;
    alloc->indices = indices;
    alloc->size = size;
    alloc->tiling = tiling;
    return alloc;
}
typedef struct org_apache_spark_rdd_cl_tests_AsyncArrayOutputTest__s org_apache_spark_rdd_cl_tests_AsyncArrayOutputTest_;

struct org_apache_spark_rdd_cl_tests_AsyncArrayOutputTest__s{
   
};

typedef struct This_s{
   int v_1;
   } This;
static double * org_apache_spark_rdd_cl_tests_AsyncArrayOutputTest__anon_1__apply(void * __swat_heap, unsigned * __swat_free_index, int * __swat_alloc_failed, const int __swat_heap_size, This *this_ptr){

   
   double * __alloc0 = (double *)alloc(__swat_heap, __swat_free_index, __swat_heap_size, sizeof(long) + (sizeof(double) * (this_ptr->v_1)), __swat_alloc_failed);
   if (*__swat_alloc_failed) { return ((double*)0x0); } *((long *)__alloc0) = (this_ptr->v_1); __alloc0 = (double *)(((long *)__alloc0) + 1); 
   double* arr = __alloc0;
   arr[0]  = (double)this_ptr->v_1;
   return arr;;
}
extern "C" __global__ void run(
      int* v_1, 
      int * out, int * out_iters, void * heap, unsigned * free_index, unsigned int heap_size, int * processing_succeeded, int N, int iter) {
   This thisStruct;
   This* this_ptr=&thisStruct;
   for (int i = (blockIdx.x * blockDim.x + threadIdx.x); i < N; i += (gridDim.x * blockDim.x)) {
      if (iter == 0) processing_succeeded[i] = 0;
      else if (processing_succeeded[i]) continue;
      int alloc_failed = 0;
      this_ptr->v_1 = v_1[i];
      double* result = org_apache_spark_rdd_cl_tests_AsyncArrayOutputTest__anon_1__apply(heap, free_index, &alloc_failed, heap_size, this_ptr);
      if (!alloc_failed) {
         processing_succeeded[i] = 1;
         out_iters[i] = iter;
         out[i] = (( char *)result) - (( char *)heap);
         
      }
   }
}
