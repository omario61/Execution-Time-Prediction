#pragma OPENCL EXTENSION cl_khr_global_int32_base_atomics : enable
#pragma OPENCL EXTENSION cl_khr_global_int32_extended_atomics : enable
#pragma OPENCL EXTENSION cl_khr_local_int32_base_atomics : enable
#pragma OPENCL EXTENSION cl_khr_local_int32_extended_atomics : enable
static int atomicAdd(__global int *_arr, int _index, int _delta){
   return atomic_add(&_arr[_index], _delta);
}
#pragma OPENCL EXTENSION cl_khr_fp64 : enable

static __global void *alloc(__global void *heap, volatile __global uint *free_index, unsigned int heap_size, int nbytes, int *alloc_failed) {
   __global unsigned char *cheap = (__global unsigned char *)heap;
   uint rounded = nbytes + (8 - (nbytes % 8));
   uint offset = atomic_add(free_index, rounded);
   if (offset + nbytes > heap_size) { *alloc_failed = 1; return 0x0; }
   else return (__global void *)(cheap + offset);
}
typedef struct __attribute__ ((packed)) org_apache_spark_mllib_linalg_SparseVector_s org_apache_spark_mllib_linalg_SparseVector;
typedef struct __attribute__ ((packed)) scala_Tuple2_I_D_s scala_Tuple2_I_D;
typedef struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_SparseVectorInputTest$_s org_apache_spark_rdd_cl_tests_SparseVectorInputTest$;

struct __attribute__ ((packed)) org_apache_spark_mllib_linalg_SparseVector_s{
   __global int*  indices;
   __global double*  values;
   int  size;
   int  tiling;
   
};


struct __attribute__ ((packed)) scala_Tuple2_I_D_s{
   double  _2;
   int  _1;
   
};


struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_SparseVectorInputTest$_s{
   
};

typedef struct This_s{
   } This;

static int org_apache_spark_mllib_linalg_SparseVector__size(__global void * restrict __swat_heap, __global uint * restrict __swat_free_index, int * restrict __swat_alloc_failed, const int __swat_heap_size, __global org_apache_spark_mllib_linalg_SparseVector *this) {
    return (this->size);
}



static __global int* org_apache_spark_mllib_linalg_SparseVector__indices(__global void * restrict __swat_heap, __global uint * restrict __swat_free_index, int * restrict __swat_alloc_failed, const int __swat_heap_size, __global org_apache_spark_mllib_linalg_SparseVector *this) {
    return (this->indices);
}



static __global double* org_apache_spark_mllib_linalg_SparseVector__values(__global void * restrict __swat_heap, __global uint * restrict __swat_free_index, int * restrict __swat_alloc_failed, const int __swat_heap_size, __global org_apache_spark_mllib_linalg_SparseVector *this) {
    return (this->values);
}



static __global scala_Tuple2_I_D* scala_Tuple2_I_D___init_(__global void * restrict __swat_heap, __global uint * restrict __swat_free_index, int * restrict __swat_alloc_failed, const int __swat_heap_size, __global scala_Tuple2_I_D *this, int  one, double  two) {
   this->_1 = one;
   this->_2 = two;
   return this;
}


static __global scala_Tuple2_I_D *org_apache_spark_rdd_cl_tests_SparseVectorInputTest$$anon$1__apply(__global void * restrict __swat_heap, __global uint * restrict __swat_free_index, int * restrict __swat_alloc_failed, const int __swat_heap_size, This *this, __global org_apache_spark_mllib_linalg_SparseVector* in){

   return(
   {
   
      int indexSum = 0;
      double valueSum = 0.0;
      int i = 0;
      for (; i<org_apache_spark_mllib_linalg_SparseVector__size(__swat_heap, __swat_free_index, __swat_alloc_failed, __swat_heap_size, in); i = i + 1){
      
         indexSum = indexSum + org_apache_spark_mllib_linalg_SparseVector__indices(__swat_heap, __swat_free_index, __swat_alloc_failed, __swat_heap_size, in)[in->tiling * (i)];
         valueSum = valueSum + org_apache_spark_mllib_linalg_SparseVector__values(__swat_heap, __swat_free_index, __swat_alloc_failed, __swat_heap_size, in)[in->tiling * (i)];
      }
      ;
      __global scala_Tuple2_I_D * __alloc0 = (__global scala_Tuple2_I_D *)alloc(__swat_heap, __swat_free_index, __swat_heap_size, sizeof(scala_Tuple2_I_D), __swat_alloc_failed);
      if (*__swat_alloc_failed) { return (0x0); }
      scala_Tuple2_I_D___init_(__swat_heap, __swat_free_index, __swat_alloc_failed, __swat_heap_size, __alloc0, indexSum, valueSum);
   });
}
__kernel void run(
      __global org_apache_spark_mllib_linalg_SparseVector * restrict in0, __global int * restrict in0_indices, __global double * restrict in0_values, __global int * restrict in0_sizes, __global int * restrict in0_offsets, int nin0, int in0_tiling, 
      __global int * restrict out_1, __global double * restrict out_2, __global void * restrict heap, __global uint * restrict free_index, unsigned int heap_size, __global int * restrict processing_succeeded, int N, int iter) {
   This thisStruct;
   This* this=&thisStruct;
   __global org_apache_spark_mllib_linalg_SparseVector *my_in0 = in0 + get_global_id(0);
   for (int i = get_global_id(0); i < N; i += get_global_size(0)) {
      if (iter == 0) processing_succeeded[i] = 0;
      else if (processing_succeeded[i]) continue;
      int alloc_failed = 0;
      my_in0->values = in0_values + in0_offsets[i]; my_in0->indices = in0_indices + in0_offsets[i]; my_in0->size = in0_sizes[i];my_in0->tiling = in0_tiling;
      __global scala_Tuple2_I_D* result = org_apache_spark_rdd_cl_tests_SparseVectorInputTest$$anon$1__apply(heap, free_index, &alloc_failed, heap_size, this, in0 + i);
      if (!alloc_failed) {
         processing_succeeded[i] = 1;
         out_1[i] = result->_1;
         out_2[i] = result->_2;
      }
   }
}
