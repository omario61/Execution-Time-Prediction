
static __device__ void *alloc(void *heap, volatile unsigned *free_index, unsigned int heap_size, int nbytes, int *alloc_failed) {
   unsigned char *cheap = (unsigned char *)heap;
   unsigned rounded = nbytes + (8 - (nbytes % 8));
   unsigned offset = atomicAdd((unsigned int *)free_index, rounded);
   if (offset + nbytes > heap_size) { *alloc_failed = 1; return 0x0; }
   else return (void *)(cheap + offset);
}
template<typename T>
inline T *dense_vec_fill(T *alloc, double *vals) {
    alloc->values = vals;
    alloc->size = *(((long *)vals) - 1);
    alloc->tiling = 1;
    return alloc;
}
template<typename T>
inline T *sparse_vec_fill(T *alloc, double *vals, int *indices, unsigned size, unsigned tiling) {
    alloc->values = vals;
    alloc->indices = indices;
    alloc->size = size;
    alloc->tiling = tiling;
    return alloc;
}
typedef struct scala_Tuple2_I_D_s scala_Tuple2_I_D;
typedef struct org_apache_spark_mllib_linalg_SparseVector_s org_apache_spark_mllib_linalg_SparseVector;
typedef struct org_apache_spark_rdd_cl_tests_SparseVectorInputTest__s org_apache_spark_rdd_cl_tests_SparseVectorInputTest_;

struct scala_Tuple2_I_D_s{
   double  _2;
   int  _1;
   
};


struct org_apache_spark_mllib_linalg_SparseVector_s{
   int*  indices;
   double*  values;
   int  size;
   int  tiling;
   
};


struct org_apache_spark_rdd_cl_tests_SparseVectorInputTest__s{
   
};

typedef struct This_s{
   } This;

static scala_Tuple2_I_D* scala_Tuple2_I_D___init_(void * __swat_heap, unsigned * __swat_free_index, int * __swat_alloc_failed, const int __swat_heap_size, scala_Tuple2_I_D *this_ptr, int  one, double  two) {
   this_ptr->_1 = one;
   this_ptr->_2 = two;
   return this_ptr;
}



static int org_apache_spark_mllib_linalg_SparseVector__size(void * __swat_heap, unsigned * __swat_free_index, int * __swat_alloc_failed, const int __swat_heap_size, org_apache_spark_mllib_linalg_SparseVector *this_ptr) {
    return (this_ptr->size);
}



static int* org_apache_spark_mllib_linalg_SparseVector__indices(void * __swat_heap, unsigned * __swat_free_index, int * __swat_alloc_failed, const int __swat_heap_size, org_apache_spark_mllib_linalg_SparseVector *this_ptr) {
    return (this_ptr->indices);
}



static double* org_apache_spark_mllib_linalg_SparseVector__values(void * __swat_heap, unsigned * __swat_free_index, int * __swat_alloc_failed, const int __swat_heap_size, org_apache_spark_mllib_linalg_SparseVector *this_ptr) {
    return (this_ptr->values);
}


static scala_Tuple2_I_D *org_apache_spark_rdd_cl_tests_SparseVectorInputTest__anon_1__apply(void * __swat_heap, unsigned * __swat_free_index, int * __swat_alloc_failed, const int __swat_heap_size, This *this_ptr, org_apache_spark_mllib_linalg_SparseVector* in){

   
   int indexSum = 0;
   double valueSum = 0.0;
   int i = 0;
   for (; i<org_apache_spark_mllib_linalg_SparseVector__size(__swat_heap, __swat_free_index, __swat_alloc_failed, __swat_heap_size, in); i = i + 1){
   
      indexSum = indexSum + org_apache_spark_mllib_linalg_SparseVector__indices(__swat_heap, __swat_free_index, __swat_alloc_failed, __swat_heap_size, in)[in->tiling * (i)];
      valueSum = valueSum + org_apache_spark_mllib_linalg_SparseVector__values(__swat_heap, __swat_free_index, __swat_alloc_failed, __swat_heap_size, in)[in->tiling * (i)];
   }
   ;
   scala_Tuple2_I_D * __alloc0 = (scala_Tuple2_I_D *)alloc(__swat_heap, __swat_free_index, __swat_heap_size, sizeof(scala_Tuple2_I_D), __swat_alloc_failed);
   if (*__swat_alloc_failed) { return ((scala_Tuple2_I_D*)0x0); }
   return scala_Tuple2_I_D___init_(__swat_heap, __swat_free_index, __swat_alloc_failed, __swat_heap_size, __alloc0, indexSum, valueSum);;
}
extern "C" __global__ void run(
      org_apache_spark_mllib_linalg_SparseVector * in0, int * in0_indices, double * in0_values, int * in0_sizes, int * in0_offsets, int nin0, int in0_tiling, 
      int * out_1, double * out_2, void * heap, unsigned * free_index, unsigned int heap_size, int * processing_succeeded, int N, int iter) {
   This thisStruct;
   This* this_ptr=&thisStruct;
   org_apache_spark_mllib_linalg_SparseVector *my_in0 = in0 + (blockIdx.x * blockDim.x + threadIdx.x);
   for (int i = (blockIdx.x * blockDim.x + threadIdx.x); i < N; i += (gridDim.x * blockDim.x)) {
      if (iter == 0) processing_succeeded[i] = 0;
      else if (processing_succeeded[i]) continue;
      int alloc_failed = 0;
      my_in0->values = in0_values + in0_offsets[i]; my_in0->indices = in0_indices + in0_offsets[i]; my_in0->size = in0_sizes[i];my_in0->tiling = in0_tiling;
      scala_Tuple2_I_D* result = org_apache_spark_rdd_cl_tests_SparseVectorInputTest__anon_1__apply(heap, free_index, &alloc_failed, heap_size, this_ptr, in0 + i);
      if (!alloc_failed) {
         processing_succeeded[i] = 1;
         out_1[i] = result->_1;
         out_2[i] = result->_2;
      }
   }
}
