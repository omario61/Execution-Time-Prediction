#pragma OPENCL EXTENSION cl_khr_fp64 : enable

static __global void *alloc(__global void *heap, volatile __global uint *free_index, unsigned int heap_size, int nbytes, int *alloc_failed) {
   __global unsigned char *cheap = (__global unsigned char *)heap;
   uint rounded = nbytes + (8 - (nbytes % 8));
   uint offset = atomic_add(free_index, rounded);
   if (offset + nbytes > heap_size) { *alloc_failed = 1; return 0x0; }
   else return (__global void *)(cheap + offset);
}
typedef struct __attribute__ ((packed)) scala_Array_s scala_Array;
typedef struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_PrimitiveArrayInputTest$_s org_apache_spark_rdd_cl_tests_PrimitiveArrayInputTest$;

struct __attribute__ ((packed)) scala_Array_s{
   __global double*  values;
   int  size;
   int  tiling;
   
};


struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_PrimitiveArrayInputTest$_s{
   
};

typedef struct This_s{
   } This;

static int scala_Array__size(__global scala_Array *this) {
    return (this->size);
}



static double scala_Array__apply(__global scala_Array *this, int index) {
    return (this->values)[this->tiling * index];
}


static double org_apache_spark_rdd_cl_tests_PrimitiveArrayInputTest$$anon$1__apply(This *this,  __global double* in, int in__javaArrayLength){

   return(
   {
   
      double sum = 0.0;
      int i = 0;
      for (; i<in__javaArrayLength; i = i + 1){
      
         sum = sum + in[i];
      }
      sum;
   });
}
__kernel void run(
      __global double * restrict in0, __global int * restrict in0_sizes, __global int * restrict in0_offsets, int nin0, 
      __global double* restrict out, int N, int iter) {
   This thisStruct;
   This* this=&thisStruct;
   for (int i = get_global_id(0); i < N; i += get_global_size(0)) {
      out[i] = org_apache_spark_rdd_cl_tests_PrimitiveArrayInputTest$$anon$1__apply(this, in0 + in0_offsets[i], in0_sizes[i]);
      
   }
}
