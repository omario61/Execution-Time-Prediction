
static __device__ void *alloc(void *heap, volatile unsigned *free_index, unsigned int heap_size, int nbytes, int *alloc_failed) {
   unsigned char *cheap = (unsigned char *)heap;
   unsigned rounded = nbytes + (8 - (nbytes % 8));
   unsigned offset = atomicAdd((unsigned int *)free_index, rounded);
   if (offset + nbytes > heap_size) { *alloc_failed = 1; return 0x0; }
   else return (void *)(cheap + offset);
}
template<typename T>
inline T *dense_vec_fill(T *alloc, double *vals) {
    alloc->values = vals;
    alloc->size = *(((long *)vals) - 1);
    alloc->tiling = 1;
    return alloc;
}
template<typename T>
inline T *sparse_vec_fill(T *alloc, double *vals, int *indices, unsigned size, unsigned tiling) {
    alloc->values = vals;
    alloc->indices = indices;
    alloc->size = size;
    alloc->tiling = tiling;
    return alloc;
}
typedef struct org_apache_spark_mllib_linalg_DenseVector_s org_apache_spark_mllib_linalg_DenseVector;
typedef struct org_apache_spark_rdd_cl_tests_DenseVectorOutputTest__s org_apache_spark_rdd_cl_tests_DenseVectorOutputTest_;

struct org_apache_spark_mllib_linalg_DenseVector_s{
   double*  values;
   int  size;
   int  tiling;
   
};


struct org_apache_spark_rdd_cl_tests_DenseVectorOutputTest__s{
   
};

typedef struct This_s{
   } This;

static int org_apache_spark_mllib_linalg_DenseVector__size(void * __swat_heap, unsigned * __swat_free_index, int * __swat_alloc_failed, const int __swat_heap_size, org_apache_spark_mllib_linalg_DenseVector *this_ptr) {
    return (this_ptr->size);
}



static double org_apache_spark_mllib_linalg_DenseVector__apply(void * __swat_heap, unsigned * __swat_free_index, int * __swat_alloc_failed, const int __swat_heap_size, org_apache_spark_mllib_linalg_DenseVector *this_ptr, int index) {
    return (this_ptr->values)[this_ptr->tiling * index];
}


static org_apache_spark_mllib_linalg_DenseVector *org_apache_spark_rdd_cl_tests_DenseVectorOutputTest__anon_1__apply(void * __swat_heap, unsigned * __swat_free_index, int * __swat_alloc_failed, const int __swat_heap_size, This *this_ptr, int in){

   
   double * __alloc0 = (double *)alloc(__swat_heap, __swat_free_index, __swat_heap_size, sizeof(long) + (sizeof(double) * (in)), __swat_alloc_failed);
   if (*__swat_alloc_failed) { return ((org_apache_spark_mllib_linalg_DenseVector*)0x0); } *((long *)__alloc0) = (in); __alloc0 = (double *)(((long *)__alloc0) + 1); 
   double* valuesArr = __alloc0;
   int i = 0;
   for (; i<in; i = i + 1){
   
      valuesArr[i]  = (double)(2 * i);
   }
   org_apache_spark_mllib_linalg_DenseVector * __alloc1 = (org_apache_spark_mllib_linalg_DenseVector *)alloc(__swat_heap, __swat_free_index, __swat_heap_size, sizeof(org_apache_spark_mllib_linalg_DenseVector), __swat_alloc_failed);
   if (*__swat_alloc_failed) { return ((org_apache_spark_mllib_linalg_DenseVector*)0x0); }
   return dense_vec_fill(__alloc1, valuesArr);;
}
extern "C" __global__ void run(
      int* in0, 
      org_apache_spark_mllib_linalg_DenseVector* out, void * heap, unsigned * free_index, unsigned int heap_size, int * processing_succeeded, int N, int iter) {
   This thisStruct;
   This* this_ptr=&thisStruct;
   for (int i = (blockIdx.x * blockDim.x + threadIdx.x); i < N; i += (gridDim.x * blockDim.x)) {
      if (iter == 0) processing_succeeded[i] = 0;
      else if (processing_succeeded[i]) continue;
      int alloc_failed = 0;
      org_apache_spark_mllib_linalg_DenseVector* result = org_apache_spark_rdd_cl_tests_DenseVectorOutputTest__anon_1__apply(heap, free_index, &alloc_failed, heap_size, this_ptr, in0[i]);
      if (!alloc_failed) {
         processing_succeeded[i] = 1;
         result->values = (double *)(((char *)result->values) - ((char *)heap));
         result->tiling = iter;
         out[i] = *result;
      }
   }
}
