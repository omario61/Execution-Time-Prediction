
static __device__ void *alloc(void *heap, volatile unsigned *free_index, unsigned int heap_size, int nbytes, int *alloc_failed) {
   unsigned char *cheap = (unsigned char *)heap;
   unsigned rounded = nbytes + (8 - (nbytes % 8));
   unsigned offset = atomicAdd((unsigned int *)free_index, rounded);
   if (offset + nbytes > heap_size) { *alloc_failed = 1; return 0x0; }
   else return (void *)(cheap + offset);
}
template<typename T>
inline T *dense_vec_fill(T *alloc, double *vals, unsigned size, unsigned tiling) {
    alloc->values = vals;
    alloc->size = size;
    alloc->tiling = tiling;
    return alloc;
}
template<typename T>
inline T *sparse_vec_fill(T *alloc, double *vals, int *indices, unsigned size, unsigned tiling) {
    alloc->values = vals;
    alloc->indices = indices;
    alloc->size = size;
    alloc->tiling = tiling;
    return alloc;
}
typedef struct org_apache_spark_mllib_linalg_DenseVector_s org_apache_spark_mllib_linalg_DenseVector;
typedef struct scala_Tuple2_I_org_apache_spark_mllib_linalg_DenseVector_s scala_Tuple2_I_org_apache_spark_mllib_linalg_DenseVector;
typedef struct org_apache_spark_rdd_cl_tests_Tuple2DenseInputTest__s org_apache_spark_rdd_cl_tests_Tuple2DenseInputTest_;

struct org_apache_spark_mllib_linalg_DenseVector_s{
   double*  values;
   int  size;
   int  tiling;
   
};


struct scala_Tuple2_I_org_apache_spark_mllib_linalg_DenseVector_s{
   org_apache_spark_mllib_linalg_DenseVector  * _2;
   int  _1;
   
};


struct org_apache_spark_rdd_cl_tests_Tuple2DenseInputTest__s{
   
};

typedef struct This_s{
   } This;

static int org_apache_spark_mllib_linalg_DenseVector__size(org_apache_spark_mllib_linalg_DenseVector *this_ptr) {
    return (this_ptr->size);
}



static double org_apache_spark_mllib_linalg_DenseVector__apply(org_apache_spark_mllib_linalg_DenseVector *this_ptr, int index) {
    return (this_ptr->values)[this_ptr->tiling * index];
}


static double org_apache_spark_rdd_cl_tests_Tuple2DenseInputTest__anon_1__apply(This *this_ptr, scala_Tuple2_I_org_apache_spark_mllib_linalg_DenseVector* in){

   return(org_apache_spark_mllib_linalg_DenseVector__apply(in->_2, ((in->_1 - org_apache_spark_mllib_linalg_DenseVector__size(in->_2)) - 4)));
}
extern "C" __global__ void run(
      int * in0_1, org_apache_spark_mllib_linalg_DenseVector * in0_2, double * in0_2_values, int * in0_2_sizes, int * in0_2_offsets, int nin0_2, int in0_2_tiling, scala_Tuple2_I_org_apache_spark_mllib_linalg_DenseVector * in0, 
      double* out, int N, int iter) {
   This thisStruct;
   This* this_ptr=&thisStruct;
   scala_Tuple2_I_org_apache_spark_mllib_linalg_DenseVector *my_in0 = in0 + (blockIdx.x * blockDim.x + threadIdx.x);
   for (int i = (blockIdx.x * blockDim.x + threadIdx.x); i < N; i += (gridDim.x * blockDim.x)) {
      my_in0->_1 = in0_1[i]; my_in0->_2 = in0_2 + i; my_in0->_2->values = in0_2_values + in0_2_offsets[i]; my_in0->_2->size = in0_2_sizes[i]; my_in0->_2->tiling = in0_2_tiling;
      out[i] = org_apache_spark_rdd_cl_tests_Tuple2DenseInputTest__anon_1__apply(this_ptr, my_in0);
      
   }
}
