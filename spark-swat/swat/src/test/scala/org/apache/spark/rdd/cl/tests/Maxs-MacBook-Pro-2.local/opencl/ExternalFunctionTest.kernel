#pragma OPENCL EXTENSION cl_khr_global_int32_base_atomics : enable
#pragma OPENCL EXTENSION cl_khr_global_int32_extended_atomics : enable
#pragma OPENCL EXTENSION cl_khr_local_int32_base_atomics : enable
#pragma OPENCL EXTENSION cl_khr_local_int32_extended_atomics : enable
static int atomicAdd(__global int *_arr, int _index, int _delta){
   return atomic_add(&_arr[_index], _delta);
}
#pragma OPENCL EXTENSION cl_khr_fp64 : enable

static __global void *alloc(__global void *heap, volatile __global uint *free_index, unsigned int heap_size, int nbytes, int *alloc_failed) {
   __global unsigned char *cheap = (__global unsigned char *)heap;
   uint rounded = nbytes + (8 - (nbytes % 8));
   uint offset = atomic_add(free_index, rounded);
   if (offset + nbytes > heap_size) { *alloc_failed = 1; return 0x0; }
   else return (__global void *)(cheap + offset);
}
typedef struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_ExternalFunctionTest$_s org_apache_spark_rdd_cl_tests_ExternalFunctionTest$;
typedef struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_Point_s org_apache_spark_rdd_cl_tests_Point;

struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_ExternalFunctionTest$_s{
   
};


struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_Point_s{
   float  x;
   float  y;
   float  z;
   
};

typedef struct This_s{
   } This;
static void org_apache_spark_rdd_cl_tests_Point__z_$eq(__global void * restrict __swat_heap, __global uint * restrict __swat_free_index, int * restrict __swat_alloc_failed, const int __swat_heap_size, __global org_apache_spark_rdd_cl_tests_Point *this, float x$1){

   this->z=x$1;
   return;
}
static float org_apache_spark_rdd_cl_tests_Point__z(__global void * restrict __swat_heap, __global uint * restrict __swat_free_index, int * restrict __swat_alloc_failed, const int __swat_heap_size, __global org_apache_spark_rdd_cl_tests_Point *this){
   return this->z;
}
static void org_apache_spark_rdd_cl_tests_Point__y_$eq(__global void * restrict __swat_heap, __global uint * restrict __swat_free_index, int * restrict __swat_alloc_failed, const int __swat_heap_size, __global org_apache_spark_rdd_cl_tests_Point *this, float x$1){

   this->y=x$1;
   return;
}
static float org_apache_spark_rdd_cl_tests_Point__y(__global void * restrict __swat_heap, __global uint * restrict __swat_free_index, int * restrict __swat_alloc_failed, const int __swat_heap_size, __global org_apache_spark_rdd_cl_tests_Point *this){
   return this->y;
}
static void org_apache_spark_rdd_cl_tests_Point__x_$eq(__global void * restrict __swat_heap, __global uint * restrict __swat_free_index, int * restrict __swat_alloc_failed, const int __swat_heap_size, __global org_apache_spark_rdd_cl_tests_Point *this, float x$1){

   this->x=x$1;
   return;
}
static float org_apache_spark_rdd_cl_tests_Point__x(__global void * restrict __swat_heap, __global uint * restrict __swat_free_index, int * restrict __swat_alloc_failed, const int __swat_heap_size, __global org_apache_spark_rdd_cl_tests_Point *this){
   return this->x;
}
static void org_apache_spark_rdd_cl_tests_Point__update_values(__global void * restrict __swat_heap, __global uint * restrict __swat_free_index, int * restrict __swat_alloc_failed, const int __swat_heap_size, __global org_apache_spark_rdd_cl_tests_Point *this, int inc){

   org_apache_spark_rdd_cl_tests_Point__x_$eq(__swat_heap, __swat_free_index, __swat_alloc_failed, __swat_heap_size, this, (this->x + (float)inc));
   org_apache_spark_rdd_cl_tests_Point__y_$eq(__swat_heap, __swat_free_index, __swat_alloc_failed, __swat_heap_size, this, (this->y + (float)inc));
   org_apache_spark_rdd_cl_tests_Point__z_$eq(__swat_heap, __swat_free_index, __swat_alloc_failed, __swat_heap_size, this, (this->z + (float)inc));
   return;
}
static __global org_apache_spark_rdd_cl_tests_Point * org_apache_spark_rdd_cl_tests_Point___init_(__global void * restrict __swat_heap, __global uint * restrict __swat_free_index, int * restrict __swat_alloc_failed, const int __swat_heap_size, __global org_apache_spark_rdd_cl_tests_Point *this, float x, float y, float z){

   this->x=x;
   this->y=y;
   this->z=z;
   ;
   return (this);
}
static __global org_apache_spark_rdd_cl_tests_Point *org_apache_spark_rdd_cl_tests_ExternalFunctionTest$$anon$1__apply(__global void * restrict __swat_heap, __global uint * restrict __swat_free_index, int * restrict __swat_alloc_failed, const int __swat_heap_size, This *this, __global org_apache_spark_rdd_cl_tests_Point* in){

   return(
   {
   
      __global org_apache_spark_rdd_cl_tests_Point * __alloc0 = (__global org_apache_spark_rdd_cl_tests_Point *)alloc(__swat_heap, __swat_free_index, __swat_heap_size, sizeof(org_apache_spark_rdd_cl_tests_Point), __swat_alloc_failed);
      if (*__swat_alloc_failed) { return (0x0); }
       __global org_apache_spark_rdd_cl_tests_Point *p = org_apache_spark_rdd_cl_tests_Point___init_(__swat_heap, __swat_free_index, __swat_alloc_failed, __swat_heap_size, __alloc0, (in->x + (float)1), (in->y + (float)2), (in->z + (float)3));
      org_apache_spark_rdd_cl_tests_Point__update_values(__swat_heap, __swat_free_index, __swat_alloc_failed, __swat_heap_size, p, 4);
      p;
   });
}
__kernel void run(
      __global org_apache_spark_rdd_cl_tests_Point* restrict in0, 
      __global org_apache_spark_rdd_cl_tests_Point* restrict out, __global void * restrict heap, __global uint * restrict free_index, unsigned int heap_size, __global int * restrict processing_succeeded, int N, int iter) {
   This thisStruct;
   This* this=&thisStruct;
   for (int i = get_global_id(0); i < N; i += get_global_size(0)) {
      if (iter == 0) processing_succeeded[i] = 0;
      else if (processing_succeeded[i]) continue;
      int alloc_failed = 0;
      __global org_apache_spark_rdd_cl_tests_Point* result = org_apache_spark_rdd_cl_tests_ExternalFunctionTest$$anon$1__apply(heap, free_index, &alloc_failed, heap_size, this, in0 + i);
      if (!alloc_failed) {
         processing_succeeded[i] = 1;
         out[i] = *result;
      }
   }
}
