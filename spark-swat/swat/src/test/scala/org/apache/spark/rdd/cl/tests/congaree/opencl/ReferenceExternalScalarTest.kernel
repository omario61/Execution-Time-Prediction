#pragma OPENCL EXTENSION cl_khr_fp64 : enable

static __global void *alloc(__global void *heap, volatile __global uint *free_index, unsigned int heap_size, int nbytes, int *alloc_failed) {
   __global unsigned char *cheap = (__global unsigned char *)heap;
   uint rounded = nbytes + (8 - (nbytes % 8));
   uint offset = atomic_add(free_index, rounded);
   if (offset + nbytes > heap_size) { *alloc_failed = 1; return 0x0; }
   else return (__global void *)(cheap + offset);
}
typedef struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_ReferenceExternalScalarTest__s org_apache_spark_rdd_cl_tests_ReferenceExternalScalarTest_;

struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_ReferenceExternalScalarTest__s{
   
};

typedef struct This_s{
   int v_1;
   } This;
static int org_apache_spark_rdd_cl_tests_ReferenceExternalScalarTest__anon_1__apply_mcII_sp(This *this_ptr, int in){

   return((in + this_ptr->v_1));
}
static int org_apache_spark_rdd_cl_tests_ReferenceExternalScalarTest__anon_1__apply(This *this_ptr, int in){

   return(org_apache_spark_rdd_cl_tests_ReferenceExternalScalarTest__anon_1__apply_mcII_sp(this_ptr, in));
}
__kernel void run(
      __global int* restrict in0, 
      __global int* restrict out, int v_1, int N, int iter) {
   This thisStruct;
   This* this_ptr=&thisStruct;
   this_ptr->v_1 = v_1;
   for (int i = get_global_id(0); i < N; i += get_global_size(0)) {
      out[i] = org_apache_spark_rdd_cl_tests_ReferenceExternalScalarTest__anon_1__apply(this_ptr, in0[i]);
      
   }
}
