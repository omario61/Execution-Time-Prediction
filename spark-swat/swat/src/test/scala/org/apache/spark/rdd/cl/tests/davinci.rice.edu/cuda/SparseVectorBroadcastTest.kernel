
static __device__ void *alloc(void *heap, volatile unsigned *free_index, unsigned int heap_size, int nbytes, int *alloc_failed) {
   unsigned char *cheap = (unsigned char *)heap;
   unsigned rounded = nbytes + (8 - (nbytes % 8));
   unsigned offset = atomicAdd((unsigned int *)free_index, rounded);
   if (offset + nbytes > heap_size) { *alloc_failed = 1; return 0x0; }
   else return (void *)(cheap + offset);
}
template<typename T>
inline T *dense_vec_fill(T *alloc, double *vals) {
    alloc->values = vals;
    alloc->size = *(((long *)vals) - 1);
    alloc->tiling = 1;
    return alloc;
}
template<typename T>
inline T *sparse_vec_fill(T *alloc, double *vals, int *indices, unsigned size, unsigned tiling) {
    alloc->values = vals;
    alloc->indices = indices;
    alloc->size = size;
    alloc->tiling = tiling;
    return alloc;
}
typedef struct org_apache_spark_mllib_linalg_SparseVector_s org_apache_spark_mllib_linalg_SparseVector;
typedef struct org_apache_spark_rdd_cl_tests_SparseVectorBroadcastTest__s org_apache_spark_rdd_cl_tests_SparseVectorBroadcastTest_;

struct org_apache_spark_mllib_linalg_SparseVector_s{
   int*  indices;
   double*  values;
   int  size;
   int  tiling;
   
};


struct org_apache_spark_rdd_cl_tests_SparseVectorBroadcastTest__s{
   
};

typedef struct This_s{
   org_apache_spark_mllib_linalg_SparseVector *broadcast_1; ;
   int broadcast_1__javaArrayLength;
   } This;

static int org_apache_spark_mllib_linalg_SparseVector__size(org_apache_spark_mllib_linalg_SparseVector *this_ptr) {
    return (this_ptr->size);
}



static int* org_apache_spark_mllib_linalg_SparseVector__indices(org_apache_spark_mllib_linalg_SparseVector *this_ptr) {
    return (this_ptr->indices);
}



static double* org_apache_spark_mllib_linalg_SparseVector__values(org_apache_spark_mllib_linalg_SparseVector *this_ptr) {
    return (this_ptr->values);
}


static double  org_apache_spark_rdd_cl_tests_SparseVectorBroadcastTest__anon_1__apply_mcDI_sp(This *this_ptr, int in){

   
   double sum = 0.0;
   int i = 0;
   for (; i<5; i = i + 1){
   
      sum = sum + (org_apache_spark_mllib_linalg_SparseVector__values(&(this_ptr->broadcast_1[i]))[(&this_ptr->broadcast_1[i])->tiling * (i)] + (double)org_apache_spark_mllib_linalg_SparseVector__indices(&(this_ptr->broadcast_1[i]))[(&this_ptr->broadcast_1[i])->tiling * (i)]);
   }
   return sum;;
}
static double org_apache_spark_rdd_cl_tests_SparseVectorBroadcastTest__anon_1__apply(This *this_ptr, int in){

   return(org_apache_spark_rdd_cl_tests_SparseVectorBroadcastTest__anon_1__apply_mcDI_sp(this_ptr, in));
}
extern "C" __global__ void run(
      int* in0, 
      double* out, org_apache_spark_mllib_linalg_SparseVector * broadcast_1, int * broadcast_1_indices, double * broadcast_1_values, int * broadcast_1_sizes, int * broadcast_1_offsets, int nbroadcast_1, int broadcast_1_tiling, int broadcast_1__javaArrayLength, int N, int iter) {
   This thisStruct;
   This* this_ptr=&thisStruct;
   this_ptr->broadcast_1 = broadcast_1;
   for (int j = 0; j < nbroadcast_1; j++) {
      (this_ptr->broadcast_1)[j].values = broadcast_1_values + broadcast_1_offsets[j];
      (this_ptr->broadcast_1)[j].indices = broadcast_1_indices + broadcast_1_offsets[j];
      (this_ptr->broadcast_1)[j].size = broadcast_1_sizes[j];
      (this_ptr->broadcast_1)[j].tiling = broadcast_1_tiling;
   }
;
   this_ptr->broadcast_1__javaArrayLength = broadcast_1__javaArrayLength;
   for (int i = (blockIdx.x * blockDim.x + threadIdx.x); i < N; i += (gridDim.x * blockDim.x)) {
      out[i] = org_apache_spark_rdd_cl_tests_SparseVectorBroadcastTest__anon_1__apply(this_ptr, in0[i]);
      
   }
}
