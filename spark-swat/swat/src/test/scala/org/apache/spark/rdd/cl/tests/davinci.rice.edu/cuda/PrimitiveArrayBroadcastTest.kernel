
static __device__ void *alloc(void *heap, volatile unsigned *free_index, unsigned int heap_size, int nbytes, int *alloc_failed) {
   unsigned char *cheap = (unsigned char *)heap;
   unsigned rounded = nbytes + (8 - (nbytes % 8));
   unsigned offset = atomicAdd((unsigned int *)free_index, rounded);
   if (offset + nbytes > heap_size) { *alloc_failed = 1; return 0x0; }
   else return (void *)(cheap + offset);
}
template<typename T>
inline T *dense_vec_fill(T *alloc, double *vals) {
    alloc->values = vals;
    alloc->size = *(((long *)vals) - 1);
    alloc->tiling = 1;
    return alloc;
}
template<typename T>
inline T *sparse_vec_fill(T *alloc, double *vals, int *indices, unsigned size, unsigned tiling) {
    alloc->values = vals;
    alloc->indices = indices;
    alloc->size = size;
    alloc->tiling = tiling;
    return alloc;
}
typedef struct org_apache_spark_rdd_cl_tests_PrimitiveArrayBroadcastTest__s org_apache_spark_rdd_cl_tests_PrimitiveArrayBroadcastTest_;

struct org_apache_spark_rdd_cl_tests_PrimitiveArrayBroadcastTest__s{
   
};

typedef struct This_s{
   int* broadcast_1;
   int broadcast_1__javaArrayLength;
   } This;
static int  org_apache_spark_rdd_cl_tests_PrimitiveArrayBroadcastTest__anon_1__apply_mcII_sp(This *this_ptr, int in){

   return(this_ptr->broadcast_1[in]);
}
static int org_apache_spark_rdd_cl_tests_PrimitiveArrayBroadcastTest__anon_1__apply(This *this_ptr, int in){

   return(org_apache_spark_rdd_cl_tests_PrimitiveArrayBroadcastTest__anon_1__apply_mcII_sp(this_ptr, in));
}
extern "C" __global__ void run(
      int* in0, 
      int* out, int* broadcast_1, int broadcast_1__javaArrayLength, int N, int iter) {
   This thisStruct;
   This* this_ptr=&thisStruct;
   this_ptr->broadcast_1 = broadcast_1;
   this_ptr->broadcast_1__javaArrayLength = broadcast_1__javaArrayLength;
   for (int i = (blockIdx.x * blockDim.x + threadIdx.x); i < N; i += (gridDim.x * blockDim.x)) {
      out[i] = org_apache_spark_rdd_cl_tests_PrimitiveArrayBroadcastTest__anon_1__apply(this_ptr, in0[i]);
      
   }
}
