#pragma OPENCL EXTENSION cl_khr_global_int32_base_atomics : enable
#pragma OPENCL EXTENSION cl_khr_global_int32_extended_atomics : enable
#pragma OPENCL EXTENSION cl_khr_local_int32_base_atomics : enable
#pragma OPENCL EXTENSION cl_khr_local_int32_extended_atomics : enable
static int atomicAdd(__global int *_arr, int _index, int _delta){
   return atomic_add(&_arr[_index], _delta);
}
#pragma OPENCL EXTENSION cl_khr_fp64 : enable

static __global void *alloc(__global void *heap, volatile __global uint *free_index, unsigned int heap_size, int nbytes, int *alloc_failed) {
   __global unsigned char *cheap = (__global unsigned char *)heap;
   uint rounded = nbytes + (8 - (nbytes % 8));
   uint offset = atomic_add(free_index, rounded);
   if (offset + nbytes > heap_size) { *alloc_failed = 1; return 0x0; }
   else return (__global void *)(cheap + offset);
}
typedef struct __attribute__ ((packed)) scala_Tuple2_I_I_s scala_Tuple2_I_I;
typedef struct __attribute__ ((packed)) scala_Tuple2_I_F_s scala_Tuple2_I_F;
typedef struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_ASPLOSPageRank$_s org_apache_spark_rdd_cl_tests_ASPLOSPageRank$;

struct __attribute__ ((packed)) scala_Tuple2_I_I_s{
   int  _1;
   int  _2;
   
};


struct __attribute__ ((packed)) scala_Tuple2_I_F_s{
   int  _1;
   float  _2;
   
};


struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_ASPLOSPageRank$_s{
   
};

typedef struct This_s{
   __global int* broadcastDocLinkCounts$1;
   int broadcastDocLinkCounts$1__javaArrayLength;
   __global float* broadcastDocRanks$1;
   int broadcastDocRanks$1__javaArrayLength;
   } This;

static __global scala_Tuple2_I_F* scala_Tuple2_I_F___init_(__global void * restrict __swat_heap, __global uint * restrict __swat_free_index, int * restrict __swat_alloc_failed, const int __swat_heap_size, __global scala_Tuple2_I_F *this, int  one, float  two) {
   this->_1 = one;
   this->_2 = two;
   return this;
}


static __global scala_Tuple2_I_I *org_apache_spark_rdd_cl_tests_ASPLOSPageRank$$anon$1__apply(__global void * restrict __swat_heap, __global uint * restrict __swat_free_index, int * restrict __swat_alloc_failed, const int __swat_heap_size, This *this, __global scala_Tuple2_I_I* in){

   return(
   {
   
      int destNode = in->_1;
      int srcNode = in->_2;
       __global float* rs = this->broadcastDocRanks$1;
       __global int* cs = this->broadcastDocLinkCounts$1;
      float r = rs[srcNode];
      int c = cs[srcNode];
      float w = r / (float)c;
      ;
      __global scala_Tuple2_I_F * __alloc0 = (__global scala_Tuple2_I_F *)alloc(__swat_heap, __swat_free_index, __swat_heap_size, sizeof(scala_Tuple2_I_F), __swat_alloc_failed);
      if (*__swat_alloc_failed) { return (0x0); }
      scala_Tuple2_I_F___init_(__swat_heap, __swat_free_index, __swat_alloc_failed, __swat_heap_size, __alloc0, in->_1, w);
   });
}
__kernel void run(
      __global int * restrict in0_1, __global int * restrict in0_2, __global scala_Tuple2_I_I * restrict in0, 
      __global int * restrict out_1, __global float * restrict out_2, __global int* restrict broadcastDocLinkCounts$1, int broadcastDocLinkCounts$1__javaArrayLength, __global float* restrict broadcastDocRanks$1, int broadcastDocRanks$1__javaArrayLength, __global void * restrict heap, __global uint * restrict free_index, unsigned int heap_size, __global int * restrict processing_succeeded, int N, int iter) {
   This thisStruct;
   This* this=&thisStruct;
   this->broadcastDocLinkCounts$1 = broadcastDocLinkCounts$1;
   this->broadcastDocLinkCounts$1__javaArrayLength = broadcastDocLinkCounts$1__javaArrayLength;
   this->broadcastDocRanks$1 = broadcastDocRanks$1;
   this->broadcastDocRanks$1__javaArrayLength = broadcastDocRanks$1__javaArrayLength;
   __global scala_Tuple2_I_I *my_in0 = in0 + get_global_id(0);
   for (int i = get_global_id(0); i < N; i += get_global_size(0)) {
      if (iter == 0) processing_succeeded[i] = 0;
      else if (processing_succeeded[i]) continue;
      int alloc_failed = 0;
      my_in0->_1 = in0_1[i]; my_in0->_2 = in0_2[i]; 
      __global scala_Tuple2_I_F* result = org_apache_spark_rdd_cl_tests_ASPLOSPageRank$$anon$1__apply(heap, free_index, &alloc_failed, heap_size, this, my_in0);
      if (!alloc_failed) {
         processing_succeeded[i] = 1;
         out_1[i] = result->_1;
         out_2[i] = result->_2;
      }
   }
}
