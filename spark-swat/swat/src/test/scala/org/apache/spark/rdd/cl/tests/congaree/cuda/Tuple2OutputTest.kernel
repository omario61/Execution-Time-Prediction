
static __device__ void *alloc(void *heap, volatile unsigned *free_index, unsigned int heap_size, int nbytes, int *alloc_failed) {
   unsigned char *cheap = (unsigned char *)heap;
   unsigned rounded = nbytes + (8 - (nbytes % 8));
   unsigned offset = atomicAdd((unsigned int *)free_index, rounded);
   if (offset + nbytes > heap_size) { *alloc_failed = 1; return 0x0; }
   else return (void *)(cheap + offset);
}
template<typename T>
inline T *dense_vec_fill(T *alloc, double *vals, unsigned size, unsigned tiling) {
    alloc->values = vals;
    alloc->size = size;
    alloc->tiling = tiling;
    return alloc;
}
template<typename T>
inline T *sparse_vec_fill(T *alloc, double *vals, int *indices, unsigned size, unsigned tiling) {
    alloc->values = vals;
    alloc->indices = indices;
    alloc->size = size;
    alloc->tiling = tiling;
    return alloc;
}
typedef struct scala_Tuple2_I_F_s scala_Tuple2_I_F;
typedef struct org_apache_spark_rdd_cl_tests_Tuple2OutputTest__s org_apache_spark_rdd_cl_tests_Tuple2OutputTest_;

struct scala_Tuple2_I_F_s{
   int  _1;
   float  _2;
   
};


struct org_apache_spark_rdd_cl_tests_Tuple2OutputTest__s{
   
};

typedef struct This_s{
   } This;

static scala_Tuple2_I_F* scala_Tuple2_I_F___init_(void * __swat_heap, unsigned * __swat_free_index, int * __swat_alloc_failed, const int __swat_heap_size, scala_Tuple2_I_F *this_ptr, int  one, float  two) {
   this_ptr->_1 = one;
   this_ptr->_2 = two;
   return this_ptr;
}


static scala_Tuple2_I_F *org_apache_spark_rdd_cl_tests_Tuple2OutputTest__anon_1__apply(void * __swat_heap, unsigned * __swat_free_index, int * __swat_alloc_failed, const int __swat_heap_size, This *this_ptr, int in){

   scala_Tuple2_I_F * __alloc0 = (scala_Tuple2_I_F *)alloc(__swat_heap, __swat_free_index, __swat_heap_size, sizeof(scala_Tuple2_I_F), __swat_alloc_failed);
   if (*__swat_alloc_failed) { return (0x0); }
   return(scala_Tuple2_I_F___init_(__swat_heap, __swat_free_index, __swat_alloc_failed, __swat_heap_size, __alloc0, (in + 1), ((float)in + 2.0f)));
}
extern "C" __global__ void run(
      int* in0, 
      int * out_1, float * out_2, void * heap, unsigned * free_index, unsigned int heap_size, int * processing_succeeded, int N, int iter) {
   This thisStruct;
   This* this_ptr=&thisStruct;
   for (int i = (blockIdx.x * blockDim.x + threadIdx.x); i < N; i += (gridDim.x * blockDim.x)) {
      if (iter == 0) processing_succeeded[i] = 0;
      else if (processing_succeeded[i]) continue;
      int alloc_failed = 0;
      scala_Tuple2_I_F* result = org_apache_spark_rdd_cl_tests_Tuple2OutputTest__anon_1__apply(heap, free_index, &alloc_failed, heap_size, this_ptr, in0[i]);
      if (!alloc_failed) {
         processing_succeeded[i] = 1;
         out_1[i] = result->_1;
         out_2[i] = result->_2;
      }
   }
}
