#pragma OPENCL EXTENSION cl_khr_global_int32_base_atomics : enable
#pragma OPENCL EXTENSION cl_khr_global_int32_extended_atomics : enable
#pragma OPENCL EXTENSION cl_khr_local_int32_base_atomics : enable
#pragma OPENCL EXTENSION cl_khr_local_int32_extended_atomics : enable
static int atomicAdd(__global int *_arr, int _index, int _delta){
   return atomic_add(&_arr[_index], _delta);
}
#pragma OPENCL EXTENSION cl_khr_fp64 : enable

static __global void *alloc(__global void *heap, volatile __global uint *free_index, unsigned int heap_size, int nbytes, int *alloc_failed) {
   __global unsigned char *cheap = (__global unsigned char *)heap;
   uint rounded = nbytes + (8 - (nbytes % 8));
   uint offset = atomic_add(free_index, rounded);
   if (offset + nbytes > heap_size) { *alloc_failed = 1; return 0x0; }
   else return (__global void *)(cheap + offset);
}
typedef struct __attribute__ ((packed)) org_apache_spark_mllib_linalg_DenseVector_s org_apache_spark_mllib_linalg_DenseVector;
typedef struct __attribute__ ((packed)) scala_Tuple2_I_org_apache_spark_mllib_linalg_DenseVector_s scala_Tuple2_I_org_apache_spark_mllib_linalg_DenseVector;
typedef struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_Tuple2DenseOutputTest__s org_apache_spark_rdd_cl_tests_Tuple2DenseOutputTest_;

struct __attribute__ ((packed)) org_apache_spark_mllib_linalg_DenseVector_s{
   __global double*  values;
   int  size;
   int  tiling;
   
};


struct __attribute__ ((packed)) scala_Tuple2_I_org_apache_spark_mllib_linalg_DenseVector_s{
   __global org_apache_spark_mllib_linalg_DenseVector  * _2;
   int  _1;
   
};


struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_Tuple2DenseOutputTest__s{
   
};

typedef struct This_s{
   } This;

static __global scala_Tuple2_I_org_apache_spark_mllib_linalg_DenseVector* scala_Tuple2_I_org_apache_spark_mllib_linalg_DenseVector___init_(__global void * restrict __swat_heap, __global uint * restrict __swat_free_index, int * restrict __swat_alloc_failed, const int __swat_heap_size, __global scala_Tuple2_I_org_apache_spark_mllib_linalg_DenseVector *this_ptr, int  one, __global org_apache_spark_mllib_linalg_DenseVector *  two) {
   this_ptr->_1 = one;
   this_ptr->_2 = two;
   return this_ptr;
}



static int org_apache_spark_mllib_linalg_DenseVector__size(__global void * restrict __swat_heap, __global uint * restrict __swat_free_index, int * restrict __swat_alloc_failed, const int __swat_heap_size, __global org_apache_spark_mllib_linalg_DenseVector *this_ptr) {
    return (this_ptr->size);
}



static double org_apache_spark_mllib_linalg_DenseVector__apply(__global void * restrict __swat_heap, __global uint * restrict __swat_free_index, int * restrict __swat_alloc_failed, const int __swat_heap_size, __global org_apache_spark_mllib_linalg_DenseVector *this_ptr, int index) {
    return (this_ptr->values)[this_ptr->tiling * index];
}


static __global scala_Tuple2_I_org_apache_spark_mllib_linalg_DenseVector *org_apache_spark_rdd_cl_tests_Tuple2DenseOutputTest__anon_1__apply(__global void * restrict __swat_heap, __global uint * restrict __swat_free_index, int * restrict __swat_alloc_failed, const int __swat_heap_size, This *this_ptr, int in){

   
   __global double * __alloc0 = (__global double *)alloc(__swat_heap, __swat_free_index, __swat_heap_size, sizeof(long) + (sizeof(double) * (in)), __swat_alloc_failed);
   if (*__swat_alloc_failed) { return (0x0); } *((__global long *)__alloc0) = (in); __alloc0 = (__global double *)(((__global long *)__alloc0) + 1); 
    __global double* arr = __alloc0;
   int i = 0;
   for (; i<in; i = i + 1){
   
      arr[i]  = (double)in;
   }
   ;
   __global scala_Tuple2_I_org_apache_spark_mllib_linalg_DenseVector * __alloc1 = (__global scala_Tuple2_I_org_apache_spark_mllib_linalg_DenseVector *)alloc(__swat_heap, __swat_free_index, __swat_heap_size, sizeof(scala_Tuple2_I_org_apache_spark_mllib_linalg_DenseVector), __swat_alloc_failed);
   if (*__swat_alloc_failed) { return (0x0); }
   __global org_apache_spark_mllib_linalg_DenseVector * __alloc2 = (__global org_apache_spark_mllib_linalg_DenseVector *)alloc(__swat_heap, __swat_free_index, __swat_heap_size, sizeof(org_apache_spark_mllib_linalg_DenseVector), __swat_alloc_failed);
   if (*__swat_alloc_failed) { return (0x0); }
   return scala_Tuple2_I_org_apache_spark_mllib_linalg_DenseVector___init_(__swat_heap, __swat_free_index, __swat_alloc_failed, __swat_heap_size, __alloc1, in, ({ __alloc2->values = arr; __alloc2->size = *(((__global long *)__alloc2->values) - 1); ; __alloc2->tiling = 1; __alloc2; }));;
}
__kernel void run(
      __global int* restrict in0, 
      __global int * restrict out_1, __global org_apache_spark_mllib_linalg_DenseVector* restrict out_2, __global void * restrict heap, __global uint * restrict free_index, unsigned int heap_size, __global int * restrict processing_succeeded, int N, int iter) {
   This thisStruct;
   This* this_ptr=&thisStruct;
   for (int i = get_global_id(0); i < N; i += get_global_size(0)) {
      if (iter == 0) processing_succeeded[i] = 0;
      else if (processing_succeeded[i]) continue;
      int alloc_failed = 0;
      __global scala_Tuple2_I_org_apache_spark_mllib_linalg_DenseVector* result = org_apache_spark_rdd_cl_tests_Tuple2DenseOutputTest__anon_1__apply(heap, free_index, &alloc_failed, heap_size, this_ptr, in0[i]);
      if (!alloc_failed) {
         processing_succeeded[i] = 1;
         out_1[i] = result->_1;
         result->_2->values = (__global double *)(((__global char *)result->_2->values) - ((__global char *)heap));
         result->_2->tiling = iter;
         out_2[i] = *(result->_2);
      }
   }
}
