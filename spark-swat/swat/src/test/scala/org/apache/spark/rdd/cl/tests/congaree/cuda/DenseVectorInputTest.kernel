
static __device__ void *alloc(void *heap, volatile unsigned *free_index, unsigned int heap_size, int nbytes, int *alloc_failed) {
   unsigned char *cheap = (unsigned char *)heap;
   unsigned rounded = nbytes + (8 - (nbytes % 8));
   unsigned offset = atomicAdd((unsigned int *)free_index, rounded);
   if (offset + nbytes > heap_size) { *alloc_failed = 1; return 0x0; }
   else return (void *)(cheap + offset);
}
template<typename T>
inline T *dense_vec_fill(T *alloc, double *vals, unsigned size, unsigned tiling) {
    alloc->values = vals;
    alloc->size = size;
    alloc->tiling = tiling;
    return alloc;
}
template<typename T>
inline T *sparse_vec_fill(T *alloc, double *vals, int *indices, unsigned size, unsigned tiling) {
    alloc->values = vals;
    alloc->indices = indices;
    alloc->size = size;
    alloc->tiling = tiling;
    return alloc;
}
typedef struct org_apache_spark_mllib_linalg_DenseVector_s org_apache_spark_mllib_linalg_DenseVector;
typedef struct org_apache_spark_rdd_cl_tests_DenseVectorInputTest__s org_apache_spark_rdd_cl_tests_DenseVectorInputTest_;

struct org_apache_spark_mllib_linalg_DenseVector_s{
   double*  values;
   int  size;
   int  tiling;
   
};


struct org_apache_spark_rdd_cl_tests_DenseVectorInputTest__s{
   
};

typedef struct This_s{
   } This;

static int org_apache_spark_mllib_linalg_DenseVector__size(org_apache_spark_mllib_linalg_DenseVector *this_ptr) {
    return (this_ptr->size);
}



static double org_apache_spark_mllib_linalg_DenseVector__apply(org_apache_spark_mllib_linalg_DenseVector *this_ptr, int index) {
    return (this_ptr->values)[this_ptr->tiling * index];
}


static double org_apache_spark_rdd_cl_tests_DenseVectorInputTest__anon_1__apply(This *this_ptr, org_apache_spark_mllib_linalg_DenseVector* in){

   
   double sum = 0.0;
   int i = 0;
   for (; i<org_apache_spark_mllib_linalg_DenseVector__size(in); i = i + 1){
   
      sum = sum + org_apache_spark_mllib_linalg_DenseVector__apply(in, i);
   }
   return sum;;
}
extern "C" __global__ void run(
      org_apache_spark_mllib_linalg_DenseVector * in0, double * in0_values, int * in0_sizes, int * in0_offsets, int nin0, int in0_tiling, 
      double* out, int N, int iter) {
   This thisStruct;
   This* this_ptr=&thisStruct;
   org_apache_spark_mllib_linalg_DenseVector *my_in0 = in0 + (blockIdx.x * blockDim.x + threadIdx.x);
   for (int i = (blockIdx.x * blockDim.x + threadIdx.x); i < N; i += (gridDim.x * blockDim.x)) {
      my_in0->values = in0_values + in0_offsets[i]; my_in0->size = in0_sizes[i]; my_in0->tiling = in0_tiling;
      out[i] = org_apache_spark_rdd_cl_tests_DenseVectorInputTest__anon_1__apply(this_ptr, in0 + i);
      
   }
}
